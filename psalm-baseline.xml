<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.12.0@f90118cdeacd0088e7215e64c0c99ceca819e176">
  <file src="src/Mockery.php">
    <ArgumentTypeCoercion>
      <code>$expectation</code>
      <code>$expectation</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>\Mockery::builtInTypes()</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>is_null(self::$_config)</code>
      <code>is_null(self::$_generator)</code>
      <code>is_null(self::$_loader)</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$newMockName</code>
    </InvalidArgument>
    <LessSpecificReturnStatement>
      <code>$mock</code>
    </LessSpecificReturnStatement>
    <MissingClosureParamType>
      <code>$argument</code>
      <code>$method</code>
      <code>$n</code>
      <code>$nesting</code>
      <code>$object</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code><![CDATA[function ($argument) use (&$reference) {]]></code>
      <code>function ($method) use ($add) {</code>
      <code>function ($n) use ($mock) {</code>
      <code>function ($object, $nesting) {</code>
    </MissingClosureReturnType>
    <MissingParamType>
      <code>$fqn</code>
      <code>$fqn</code>
      <code>$fqn</code>
      <code>$reference</code>
      <code>$type</code>
    </MissingParamType>
    <MissingReturnType>
      <code>declareClass</code>
      <code>declareInterface</code>
      <code>declareType</code>
      <code>registerFileForCleanUp</code>
      <code>setGenerator</code>
      <code>setLoader</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$expectations</code>
      <code>$fileName</code>
      <code>$formatter($object, $nesting)</code>
      <code>$n</code>
      <code>$nesting</code>
      <code>$object</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$formattedArguments</code>
      <code>$k</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$arg</code>
      <code>$argument</code>
      <code>$argument[$key]</code>
      <code>$cleanedProperties[$name]</code>
      <code>$expectations</code>
      <code>$expectations</code>
      <code>$fileName</code>
      <code>$formattedArguments[]</code>
      <code>$formatter</code>
      <code>$mock</code>
      <code>$mock</code>
      <code>$name</code>
      <code>$reference</code>
      <code>$shortName</code>
      <code>$v</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedFunctionCall>
      <code>$formatter($object, $nesting)</code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>\Mockery\ExpectationInterface</code>
      <code>\Mockery\MockInterface|\Mockery\LegacyMockInterface</code>
      <code>\Mockery\MockInterface|\Mockery\LegacyMockInterface</code>
      <code>\Mockery\MockInterface|\Mockery\LegacyMockInterface</code>
      <code>\Mockery\MockInterface|\Mockery\LegacyMockInterface</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>mockery_getExpectationsFor</code>
      <code>shouldIgnoreMissing</code>
      <code>shouldReceive</code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$object->$name]]></code>
    </MixedPropertyFetch>
    <MixedReturnStatement>
      <code>$expectations</code>
      <code>$expectations</code>
      <code><![CDATA[call_user_func_array(array(self::getContainer(), 'mock'), $args)]]></code>
      <code><![CDATA[call_user_func_array(array(self::getContainer(), 'mock'), $args)]]></code>
      <code><![CDATA[call_user_func_array(array(self::getContainer(), 'mock'), $args)]]></code>
      <code><![CDATA[call_user_func_array(array(self::getContainer(), 'mock'), $args)->shouldIgnoreMissing()]]></code>
    </MixedReturnStatement>
    <MoreSpecificReturnType>
      <code>\Mockery\Mock</code>
    </MoreSpecificReturnType>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code>andAnyOtherArgs</code>
      <code>andAnyOthers</code>
      <code>any</code>
      <code>anyOf</code>
      <code>capture</code>
      <code>contains</code>
      <code>ducktype</code>
      <code>globalHelpers</code>
      <code>hasKey</code>
      <code>hasValue</code>
      <code>instanceMock</code>
      <code>isBuiltInType</code>
      <code>mustBe</code>
      <code>not</code>
      <code>notAnyOf</code>
      <code>on</code>
      <code>pattern</code>
      <code>resetContainer</code>
      <code>setContainer</code>
      <code>setGenerator</code>
      <code>setLoader</code>
      <code>subset</code>
      <code>type</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>\Mockery\MockInterface|\Mockery\LegacyMockInterface</code>
    </PossiblyUnusedReturnValue>
    <RedundantConditionGivenDocblockType>
      <code>$parentMock !== null</code>
    </RedundantConditionGivenDocblockType>
    <UnnecessaryVarAnnotation>
      <code>Mockery\Container</code>
    </UnnecessaryVarAnnotation>
    <UnresolvableInclude>
      <code>require $tmpfname</code>
    </UnresolvableInclude>
    <UnusedVariable>
      <code>$parRefMethod</code>
      <code>$parRefMethodRetType</code>
    </UnusedVariable>
  </file>
  <file src="src/Mockery/Adapter/Phpunit/Extension.php">
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException('Mockery is not enabled.')]]></code>
    </InternalClass>
    <InternalMethod>
      <code>addToAssertionCount</code>
      <code><![CDATA[new ExpectationFailedException('Mockery is not enabled.')]]></code>
    </InternalMethod>
  </file>
  <file src="src/Mockery/Adapter/Phpunit/MockeryTestCase.php">
    <MissingReturnType>
      <code>mockeryTestSetUp</code>
      <code>mockeryTestTearDown</code>
    </MissingReturnType>
  </file>
  <file src="src/Mockery/Adapter/Phpunit/Subscriber/ApplicationStartedSubscriber.php">
    <ArgumentTypeCoercion>
      <code>dirname($filename)</code>
    </ArgumentTypeCoercion>
    <MixedArgument>
      <code>$filename</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$excludeList</code>
      <code>$filename</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>isExcluded</code>
    </MixedMethodCall>
  </file>
  <file src="src/Mockery/Adapter/Phpunit/Subscriber/TestPassedSubscriber.php">
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException(sprintf(
                implode("\n", [
                    "Mockery's expectations have not been verified.",
                    'Make sure that \Mockery::close() is called at the end of the test.',
                    'Consider extending %s.',
                ]),
                MockeryTestCase::class
            ))]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new ExpectationFailedException(sprintf(
                implode("\n", [
                    "Mockery's expectations have not been verified.",
                    'Make sure that \Mockery::close() is called at the end of the test.',
                    'Consider extending %s.',
                ]),
                MockeryTestCase::class
            ))]]></code>
    </InternalMethod>
  </file>
  <file src="src/Mockery/Adapter/Phpunit/TestListener.php">
    <PossiblyUnusedParam>
      <code>$suite</code>
      <code>$test</code>
      <code>$time</code>
    </PossiblyUnusedParam>
    <UndefinedClass>
      <code>PHPUnitTestListener</code>
    </UndefinedClass>
    <UnusedClass>
      <code>TestListener</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/Adapter/Phpunit/TestListenerTrait.php">
    <InternalClass>
      <code><![CDATA[new ExpectationFailedException(
            \sprintf(
                "Mockery's expectations have not been verified. Make sure that \Mockery::close() is called at the end of the test. Consider using %s\MockeryPHPUnitIntegration or extending %s\MockeryTestCase.",
                __NAMESPACE__,
                __NAMESPACE__
            )
        )]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new ExpectationFailedException(
            \sprintf(
                "Mockery's expectations have not been verified. Make sure that \Mockery::close() is called at the end of the test. Consider using %s\MockeryPHPUnitIntegration or extending %s\MockeryTestCase.",
                __NAMESPACE__,
                __NAMESPACE__
            )
        )]]></code>
    </InternalMethod>
    <MissingReturnType>
      <code>endTest</code>
      <code>startTestSuite</code>
    </MissingReturnType>
    <MixedArgument>
      <code>Blacklist::class</code>
    </MixedArgument>
    <RedundantConditionGivenDocblockType>
      <code>$result !== null</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedClass>
      <code>BaseTestRunner</code>
      <code>BlackList</code>
      <code>Blacklist</code>
      <code>Blacklist</code>
    </UndefinedClass>
    <UndefinedDocblockClass>
      <code>$result</code>
      <code>$result</code>
    </UndefinedDocblockClass>
    <UndefinedMethod>
      <code>getStatus</code>
      <code>getTestResultObject</code>
    </UndefinedMethod>
    <UnusedClass>
      <code>TestListenerTrait</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/CompositeExpectation.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MixedAssignment>
      <code>$exp</code>
      <code>$expectation</code>
      <code>$first</code>
      <code>$first</code>
      <code>$first</code>
      <code>$first</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>\Mockery\Expectation</code>
      <code>\Mockery\Expectation</code>
      <code>\Mockery\MockInterface|\Mockery\LegacyMockInterface</code>
      <code>int</code>
      <code>self</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getMock</code>
      <code>getMock</code>
      <code>getMock</code>
      <code>getOrderNumber</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$first->getMock()]]></code>
      <code><![CDATA[$first->getOrderNumber()]]></code>
      <code><![CDATA[call_user_func_array($this->andReturn(...), $args)]]></code>
      <code><![CDATA[call_user_func_array(array($first->getMock(), 'shouldNotReceive'), $args)]]></code>
      <code><![CDATA[call_user_func_array(array($first->getMock(), 'shouldReceive'), $args)]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code>mock</code>
      <code>shouldNotReceive</code>
      <code>shouldReceive</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Configuration.php">
    <MissingParamType>
      <code>$class</code>
      <code>$class</code>
      <code>$class</code>
      <code>$class</code>
      <code>$defaultFormatter</code>
      <code>$formatterCallback</code>
      <code>$method</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$_constantsMap</code>
      <code>$_reflectionCacheEnabled</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>allowMockingMethodsUnnecessarily</code>
      <code>allowMockingNonExistentMethods</code>
      <code>disableReflectionCache</code>
      <code>enableReflectionCache</code>
      <code>getConstantsMap</code>
      <code>getDefaultMatcher</code>
      <code>getInternalClassMethodParamMaps</code>
      <code>getObjectFormatter</code>
      <code>reflectionCacheEnabled</code>
      <code>resetInternalClassMethodParamMaps</code>
      <code>setConstantsMap</code>
      <code>setDefaultMatcher</code>
      <code>setInternalClassMethodParamMap</code>
      <code>setObjectFormatter</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$class</code>
      <code>$class</code>
      <code>$parentClass</code>
      <code>$parentClass</code>
      <code>$parentClass</code>
      <code>$parentClass</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$this->_internalClassParamMap[strtolower((string) $class)][strtolower((string) $method)]]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code><![CDATA[$this->_internalClassParamMap[strtolower($class)][strtolower($method)]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code><![CDATA[$this->_defaultMatchers[$type]]]></code>
      <code><![CDATA[$this->_objectFormatters[$class]]]></code>
      <code><![CDATA[$this->_objectFormatters[$type]]]></code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion>
      <code><![CDATA[$this->_defaultMatchers[$type]]]></code>
      <code><![CDATA[$this->_objectFormatters[$type]]]></code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code>$classes[]</code>
      <code>$classes[]</code>
      <code>$parentClass</code>
      <code>$parentClass</code>
      <code>$type</code>
      <code>$type</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array|null</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->_internalClassParamMap[strtolower((string) $class)][strtolower((string) $method)]]]></code>
    </MixedReturnStatement>
    <PossiblyUndefinedVariable>
      <code>$classes</code>
      <code>$classes</code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedMethod>
      <code>allowMockingMethodsUnnecessarily</code>
      <code>allowMockingNonExistentMethods</code>
      <code>disableReflectionCache</code>
      <code>enableReflectionCache</code>
      <code>getInternalClassMethodParamMap</code>
      <code>mockingMethodsUnnecessarilyAllowed</code>
      <code>resetInternalClassMethodParamMaps</code>
      <code>setConstantsMap</code>
      <code>setDefaultMatcher</code>
      <code>setInternalClassMethodParamMap</code>
      <code>setObjectFormatter</code>
    </PossiblyUnusedMethod>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Mockery/Container.php">
    <ArgumentTypeCoercion>
      <code><![CDATA["Mockery\LegacyMockInterface"]]></code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code>$arg instanceof MockConfigurationBuilder</code>
      <code>is_object($arg)</code>
      <code>is_string($arg)</code>
    </DocblockTypeContradiction>
    <InvalidArrayOffset>
      <code>$mocks[$index]</code>
    </InvalidArrayOffset>
    <InvalidStringClass>
      <code>new $internalMockName()</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>$mock</code>
    </LessSpecificReturnStatement>
    <MissingParamType>
      <code>$config</code>
      <code>$constructorArgs</code>
      <code>$mockName</code>
      <code>$reference</code>
    </MissingParamType>
    <MissingReturnType>
      <code>_getInstance</code>
      <code>checkForNamedMockClashes</code>
      <code>getGenerator</code>
      <code>getLoader</code>
      <code>instanceMock</code>
      <code>mockery_setGroup</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$arg</code>
      <code>$blocks</code>
      <code>$constructorArgs</code>
      <code><![CDATA[$def->getClassName()]]></code>
      <code><![CDATA[$def->getClassName()]]></code>
      <code>$mock</code>
      <code><![CDATA[$mock->mockery_thrownExceptions()]]></code>
      <code>$mockName</code>
      <code><![CDATA[\Mockery::getConfiguration()->getConstantsMap()]]></code>
      <code><![CDATA[\Mockery::getConfiguration()->getInternalClassMethodParamMaps()]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$keys</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayOffset>
      <code><![CDATA[$this->_groups[$group]]]></code>
      <code><![CDATA[$this->_mocks[$reference]]]></code>
      <code><![CDATA[$this->_namedMocks[$name]]]></code>
      <code><![CDATA[$this->_namedMocks[$name]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$blocks</code>
      <code>$config</code>
      <code>$count</code>
      <code>$def</code>
      <code>$hash</code>
      <code>$instance</code>
      <code>$mock</code>
      <code>$mock</code>
      <code>$mock</code>
      <code>$mock</code>
      <code>$mock</code>
      <code>$name</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>\Mockery\Mock</code>
      <code>\Mockery\Mock</code>
      <code>int</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>atLeast</code>
      <code>byDefault</code>
      <code>generate</code>
      <code>getClassName</code>
      <code>getClassName</code>
      <code>getClassName</code>
      <code>getClassName</code>
      <code>getHash</code>
      <code>getName</code>
      <code>getTargetObject</code>
      <code>isInstanceMock</code>
      <code>load</code>
      <code>mockery_getExpectationCount</code>
      <code>mockery_init</code>
      <code>mockery_teardown</code>
      <code>mockery_thrownExceptions</code>
      <code>mockery_verify</code>
      <code>once</code>
      <code>setActualOrder</code>
      <code>setExpectedOrder</code>
      <code>setMethodName</code>
      <code>shouldReceive</code>
      <code>shouldReceive</code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$mock->mockery_getExpectationCount()]]></code>
      <code>$mockName</code>
    </MixedOperand>
    <MixedReturnStatement>
      <code>$count</code>
      <code>$mocks[$index]</code>
      <code><![CDATA[$this->_mocks[$reference]]]></code>
    </MixedReturnStatement>
    <MoreSpecificReturnType>
      <code>Mock</code>
    </MoreSpecificReturnType>
    <PossiblyUnusedMethod>
      <code>instanceMock</code>
      <code>mockery_allocateOrder</code>
      <code>mockery_getCurrentOrder</code>
      <code>mockery_getGroups</code>
      <code>mockery_setGroup</code>
      <code>mockery_thrownExceptions</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>\Mockery\LegacyMockInterface|\Mockery\MockInterface</code>
      <code>int</code>
    </PossiblyUnusedReturnValue>
    <RedundantCondition>
      <code><![CDATA[!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() && (!class_exists($type, true) && !interface_exists($type, true))]]></code>
      <code><![CDATA[!\Mockery::getConfiguration()->mockingNonExistentMethodsAllowed() && (!class_exists($type, true) && !interface_exists($type, true))]]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[count($res) > 0]]></code>
      <code>is_array($arg)</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType>
      <code><![CDATA[is_callable($finalArg) && is_object($finalArg)]]></code>
      <code>is_object($finalArg)</code>
    </TypeDoesNotContainType>
    <UnusedVariable>
      <code>$class</code>
    </UnusedVariable>
  </file>
  <file src="src/Mockery/CountValidator/AbstractCountValidator.php">
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>isEligible</code>
      <code>validate</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/CountValidator/AtLeast.php">
    <MixedMethodCall>
      <code>setActualCount</code>
      <code>setExpectedCount</code>
      <code>setExpectedCountComparative</code>
      <code>setMethodName</code>
    </MixedMethodCall>
    <UnusedClass>
      <code>AtLeast</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/CountValidator/AtMost.php">
    <MixedMethodCall>
      <code>setActualCount</code>
      <code>setExpectedCount</code>
      <code>setExpectedCountComparative</code>
      <code>setMethodName</code>
    </MixedMethodCall>
    <UnusedClass>
      <code>AtMost</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/CountValidator/Exact.php">
    <MixedAssignment>
      <code>$because</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>setActualCount</code>
      <code>setExpectedCount</code>
      <code>setExpectedCountComparative</code>
      <code>setMethodName</code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$this->expectation->getExceptionMessage()]]></code>
    </MixedOperand>
    <UnusedClass>
      <code>Exact</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/Exception/BadMethodCallException.php">
    <MissingPropertyType>
      <code>$dismissed</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>dismiss</code>
      <code>dismissed</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>dismiss</code>
      <code>dismissed</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Exception/InvalidArgumentException.php">
    <UnusedClass>
      <code>InvalidArgumentException</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/Exception/InvalidCountException.php">
    <MissingParamType>
      <code>$comp</code>
      <code>$count</code>
      <code>$count</code>
      <code>$name</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$actual</code>
      <code>$expected</code>
      <code>$expectedComparative</code>
      <code>$method</code>
      <code>$mockObject</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>getActualCount</code>
      <code>getExpectedCount</code>
      <code>getExpectedCountComparative</code>
      <code>getMethodName</code>
      <code>getMock</code>
      <code>getMockName</code>
      <code>setActualCount</code>
      <code>setExpectedCount</code>
      <code>setExpectedCountComparative</code>
      <code>setMethodName</code>
      <code>setMock</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>mockery_getName</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$comp</code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code>getActualCount</code>
      <code>getExpectedCount</code>
      <code>getExpectedCountComparative</code>
      <code>getMethodName</code>
      <code>getMockName</code>
      <code>setActualCount</code>
      <code>setExpectedCount</code>
      <code>setExpectedCountComparative</code>
      <code>setMethodName</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Exception/InvalidOrderException.php">
    <MissingParamType>
      <code>$count</code>
      <code>$count</code>
      <code>$name</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$actual</code>
      <code>$expected</code>
      <code>$method</code>
      <code>$mockObject</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>getActualOrder</code>
      <code>getExpectedOrder</code>
      <code>getMethodName</code>
      <code>getMock</code>
      <code>getMockName</code>
      <code>setActualOrder</code>
      <code>setExpectedOrder</code>
      <code>setMethodName</code>
      <code>setMock</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>mockery_getName</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>getActualOrder</code>
      <code>getExpectedOrder</code>
      <code>getMethodName</code>
      <code>getMockName</code>
      <code>setActualOrder</code>
      <code>setExpectedOrder</code>
      <code>setMethodName</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Exception/NoMatchingExpectationException.php">
    <MissingParamType>
      <code>$count</code>
      <code>$name</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$actual</code>
      <code>$method</code>
      <code>$mockObject</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>getActualArguments</code>
      <code>getMethodName</code>
      <code>getMock</code>
      <code>getMockName</code>
      <code>setActualArguments</code>
      <code>setMethodName</code>
      <code>setMock</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>mockery_getName</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>getActualArguments</code>
      <code>getMethodName</code>
      <code>getMockName</code>
      <code>setActualArguments</code>
      <code>setMethodName</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Expectation.php">
    <DocblockTypeContradiction>
      <code>!is_int($index)</code>
      <code>is_int($limit)</code>
      <code>is_null($group)</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$argsOrClosure</code>
    </InvalidArgument>
    <InvalidReturnType>
      <code>mixed</code>
      <code>self</code>
    </InvalidReturnType>
    <InvalidStringClass>
      <code>new $exception($message, $code, $previous)</code>
      <code><![CDATA[new $this->_countValidatorClass($this, $limit)]]></code>
    </InvalidStringClass>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingClosureParamType>
      <code>$args</code>
      <code>$args</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>function (...$args) use ($index) {</code>
      <code>static function () use ($args) {</code>
    </MissingClosureReturnType>
    <MissingParamType>
      <code>$code</code>
      <code>$exception</code>
      <code>$expectedArg</code>
      <code>$message</code>
      <code>$return</code>
    </MissingParamType>
    <MissingReturnType>
      <code>andReturnFalse</code>
      <code>andReturnTrue</code>
      <code>andThrows</code>
      <code>between</code>
      <code>getExceptionMessage</code>
      <code>getName</code>
      <code>isAndAnyOtherArgumentsMatcher</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$code</code>
      <code>$exception</code>
      <code>$message</code>
      <code>$values</code>
      <code>$values</code>
      <code>func_get_args()</code>
      <code>func_get_args()</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[array_search($lastExpectedArgument, $this->_expectedArgs, true)]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$arg</code>
      <code>$expectedArg</code>
      <code>$groups</code>
      <code>$lastExpectedArgument</code>
      <code>$matcher</code>
      <code>$newValidators[]</code>
      <code>$result</code>
      <code>$result</code>
      <code>$result</code>
      <code>$return</code>
      <code>$validator</code>
      <code>$validator</code>
      <code>$validator</code>
      <code>$value</code>
      <code>$values</code>
    </MixedAssignment>
    <MixedClone>
      <code>clone $validator</code>
    </MixedClone>
    <MixedFunctionCall>
      <code><![CDATA[call_user_func_array(array_shift($this->_closureQueue), $args)]]></code>
      <code><![CDATA[call_user_func_array(current($this->_closureQueue), $args)]]></code>
    </MixedFunctionCall>
    <MixedInferredReturnType>
      <code>int</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>isEligible</code>
      <code>mockery_allocateOrder</code>
      <code>mockery_allocateOrder</code>
      <code>mockery_getGroups</code>
      <code>mockery_setGroup</code>
      <code>new $matcher($expected)</code>
      <code>validate</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code>$result</code>
    </MixedReturnStatement>
    <PossiblyFalseArgument>
      <code><![CDATA[array_search($lastExpectedArgument, $this->_expectedArgs, true)]]></code>
    </PossiblyFalseArgument>
    <PossiblyNullArgument>
      <code>$group</code>
      <code>$group</code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code>andReturnArg</code>
      <code>andReturnFalse</code>
      <code>andReturnNull</code>
      <code>andReturnSelf</code>
      <code>andReturnTrue</code>
      <code>andReturnUndefined</code>
      <code>andReturnUsing</code>
      <code>andThrowExceptions</code>
      <code>andThrows</code>
      <code>andYield</code>
      <code>because</code>
      <code>between</code>
      <code>byDefault</code>
      <code>globally</code>
      <code>isCallCountConstrained</code>
      <code>isEligible</code>
      <code>ordered</code>
      <code>passthru</code>
      <code>set</code>
      <code>twice</code>
      <code>with</code>
      <code>withSomeOfArgs</code>
      <code>zeroOrMoreTimes</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$_returnValue</code>
    </PossiblyUnusedProperty>
    <PossiblyUnusedReturnValue>
      <code>mixed</code>
      <code>mixed</code>
      <code>self</code>
    </PossiblyUnusedReturnValue>
    <RedundantCastGivenDocblockType>
      <code><![CDATA[(array) $this->_expectedArgs]]></code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>$argsOrClosure instanceof Closure</code>
    </RedundantConditionGivenDocblockType>
    <TooManyArguments>
      <code>mockery_validateOrder</code>
    </TooManyArguments>
    <UndefinedInterfaceMethod>
      <code>mockery_callSubjectMethod</code>
      <code>mockery_returnValueForMethod</code>
    </UndefinedInterfaceMethod>
    <UnusedDocblockParam>
      <code>$args</code>
      <code>$args</code>
      <code>$name</code>
    </UnusedDocblockParam>
  </file>
  <file src="src/Mockery/ExpectationDirector.php">
    <MissingReturnType>
      <code>addExpectation</code>
      <code>makeExpectationDefault</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$exp</code>
      <code>$exp</code>
      <code>$exp</code>
      <code>$exp</code>
      <code>$expectation</code>
      <code>$expectation</code>
      <code>$expectation</code>
      <code>$expectation</code>
      <code>$last</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>isCallCountConstrained</code>
      <code>isEligible</code>
      <code>matchArgs</code>
      <code>matchArgs</code>
      <code>setActualArguments</code>
      <code>setMethodName</code>
      <code>verify</code>
      <code>verify</code>
      <code>verifyCall</code>
    </MixedMethodCall>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code>call</code>
      <code>getExpectationCount</code>
      <code>verify</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$_expectedOrder</code>
    </PossiblyUnusedProperty>
    <RawObjectIteration>
      <code>$expectations</code>
    </RawObjectIteration>
  </file>
  <file src="src/Mockery/ExpectationInterface.php">
    <PossiblyUnusedMethod>
      <code>andReturns</code>
      <code>getOrderNumber</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/ExpectsHigherOrderMessage.php">
    <MissingParamType>
      <code>$args</code>
      <code>$method</code>
    </MissingParamType>
  </file>
  <file src="src/Mockery/Generator/CachingGenerator.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->cache]]></code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code><![CDATA[$this->cache[$config->getHash()] ??= $this->generator->generate($config)]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>MockDefinition</code>
    </InvalidReturnType>
  </file>
  <file src="src/Mockery/Generator/DefinedTargetClass.php">
    <ArgumentTypeCoercion>
      <code>$name</code>
    </ArgumentTypeCoercion>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingClosureParamType>
      <code>$interface</code>
      <code>$method</code>
    </MissingClosureParamType>
    <MissingParamType>
      <code>$alias</code>
      <code>$alias</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$name</code>
      <code>$rfc</code>
    </MissingPropertyType>
    <MixedArgument>
      <code>$interface</code>
      <code>$method</code>
      <code><![CDATA[$this->rfc->getAttributes()]]></code>
      <code><![CDATA[$this->rfc->getInterfaces()]]></code>
      <code><![CDATA[$this->rfc->getMethods()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$child</code>
      <code>$child</code>
      <code>$parent</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>getName</code>
      <code>getNamespaceName</code>
      <code>getShortName</code>
      <code>implementsInterface</code>
      <code>inNamespace</code>
      <code>isAbstract</code>
      <code>isFinal</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getAttributes</code>
      <code>getInterfaces</code>
      <code>getMethods</code>
      <code>getNamespaceName</code>
      <code>getParentClass</code>
      <code>getShortName</code>
      <code>implementsInterface</code>
      <code>inNamespace</code>
      <code>isAbstract</code>
      <code>isFinal</code>
      <code>isInternal</code>
      <code>isInternal</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->name]]></code>
      <code><![CDATA[$this->rfc->getNamespaceName()]]></code>
      <code><![CDATA[$this->rfc->getShortName()]]></code>
      <code><![CDATA[$this->rfc->implementsInterface($interface)]]></code>
      <code><![CDATA[$this->rfc->inNamespace()]]></code>
      <code><![CDATA[$this->rfc->isAbstract()]]></code>
      <code><![CDATA[$this->rfc->isFinal()]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Mockery/Generator/Method.php">
    <MissingParamType>
      <code>$args</code>
      <code>$method</code>
    </MissingParamType>
  </file>
  <file src="src/Mockery/Generator/MockConfiguration.php">
    <MissingClosureParamType>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
    </MissingClosureParamType>
    <MissingParamType>
      <code>$className</code>
      <code>$instanceMock</code>
      <code>$interfaces</code>
      <code>$mockOriginalDestructor</code>
      <code>$name</code>
      <code>$object</code>
      <code>$target</code>
      <code>$targetClassName</code>
      <code>$targetInterface</code>
      <code>$targetTraitName</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$allMethods</code>
      <code>$blackListedMethods</code>
      <code>$constantsMap</code>
      <code>$instanceMock</code>
      <code>$mockOriginalDestructor</code>
      <code>$name</code>
      <code>$parameterOverrides</code>
      <code>$targetClass</code>
      <code>$targetClassName</code>
      <code>$targetInterfaceNames</code>
      <code>$targetInterfaces</code>
      <code>$targetObject</code>
      <code>$targetTraitNames</code>
      <code>$targetTraits</code>
      <code>$whiteListedMethods</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>addTarget</code>
      <code>addTargetInterfaceName</code>
      <code>addTargetTraitName</code>
      <code>addTargets</code>
      <code>generateName</code>
      <code>getAllMethods</code>
      <code>getBlackListedMethods</code>
      <code>getConstantsMap</code>
      <code>getMethodsToMock</code>
      <code>getName</code>
      <code>getNamespaceName</code>
      <code>getParameterOverrides</code>
      <code>getShortName</code>
      <code>getTargetClass</code>
      <code>getTargetClassName</code>
      <code>getTargetInterfaces</code>
      <code>getTargetObject</code>
      <code>getTargetTraits</code>
      <code>getWhiteListedMethods</code>
      <code>isInstanceMock</code>
      <code>isMockOriginalDestructor</code>
      <code>rename</code>
      <code>requiresCallStaticTypeHintRemoval</code>
      <code>requiresCallTypeHintRemoval</code>
      <code>setTargetClassName</code>
      <code>setTargetObject</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$alias</code>
      <code><![CDATA[$class->getMethods()]]></code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$names</code>
      <code>$target</code>
      <code>$target</code>
      <code>$target</code>
      <code>$targetInterface</code>
      <code>$targetInterface</code>
      <code>$targetTrait</code>
      <code><![CDATA[$this->blackListedMethods]]></code>
      <code><![CDATA[$this->constantsMap]]></code>
      <code><![CDATA[$this->getBlackListedMethods()]]></code>
      <code><![CDATA[$this->getBlackListedMethods()]]></code>
      <code><![CDATA[$this->getBlackListedMethods()]]></code>
      <code><![CDATA[$this->getTargetObject()]]></code>
      <code><![CDATA[$this->getWhiteListedMethods()]]></code>
      <code><![CDATA[$this->getWhiteListedMethods()]]></code>
      <code><![CDATA[$this->getWhiteListedMethods()]]></code>
      <code><![CDATA[$this->parameterOverrides]]></code>
      <code><![CDATA[$this->targetClassName]]></code>
      <code><![CDATA[$this->targetClassName]]></code>
      <code><![CDATA[$this->targetInterfaceNames]]></code>
      <code><![CDATA[$this->targetInterfaces]]></code>
      <code><![CDATA[$this->targetTraitNames]]></code>
      <code><![CDATA[$this->targetTraits]]></code>
      <code><![CDATA[$this->whiteListedMethods]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$interface</code>
      <code>$interface</code>
      <code>$interface</code>
      <code>$interface</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code>$methods[$key]</code>
      <code>$params[1]</code>
      <code>$params[1]</code>
      <code>$target[0]</code>
      <code><![CDATA[$this->getBlackListedMethods()]]></code>
      <code><![CDATA[$this->getWhiteListedMethods()]]></code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code>$classes[]</code>
      <code>$names[]</code>
      <code><![CDATA[$this->targetInterfaceNames[]]]></code>
      <code><![CDATA[$this->targetInterfaces[]]]></code>
      <code><![CDATA[$this->targetInterfaces[]]]></code>
      <code><![CDATA[$this->targetInterfaces[]]]></code>
      <code><![CDATA[$this->targetInterfaces[]]]></code>
      <code><![CDATA[$this->targetInterfaces[]]]></code>
      <code><![CDATA[$this->targetTraitNames[]]]></code>
      <code><![CDATA[$this->targetTraits[]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code>$methods[$key]</code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$alias</code>
      <code>$class</code>
      <code>$className</code>
      <code>$classes</code>
      <code>$classes[]</code>
      <code>$interface</code>
      <code>$key</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$methods</code>
      <code>$methods[]</code>
      <code>$names[]</code>
      <code>$params</code>
      <code>$params</code>
      <code>$targetInterface</code>
      <code>$targetTrait</code>
      <code>$targets[]</code>
      <code>$targets[]</code>
      <code>$trait</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>addPart</code>
      <code>build</code>
      <code>getMethods</code>
      <code>getMethods</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getParameters</code>
      <code>getParameters</code>
      <code>hasInternalAncestor</code>
      <code>implementsInterface</code>
      <code>isAbstract</code>
      <code>isAbstract</code>
      <code>isArray</code>
      <code>isArray</code>
      <code>isFinal</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$target</code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code>getParameterOverrides</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/MockConfigurationBuilder.php">
    <MissingParamType>
      <code>$blackListedMethod</code>
      <code>$instanceMock</code>
      <code>$mockDestructor</code>
      <code>$name</code>
      <code>$target</code>
      <code>$targets</code>
      <code>$whiteListedMethod</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$blackListedMethods</code>
      <code>$constantsMap</code>
      <code>$instanceMock</code>
      <code>$mockOriginalDestructor</code>
      <code>$name</code>
      <code>$parameterOverrides</code>
      <code>$php7SemiReservedKeywords</code>
      <code>$targets</code>
      <code>$whiteListedMethods</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>addBlackListedMethod</code>
      <code>addBlackListedMethods</code>
      <code>addTarget</code>
      <code>addTargets</code>
      <code>addWhiteListedMethod</code>
      <code>addWhiteListedMethods</code>
      <code>getMockConfiguration</code>
      <code>setBlackListedMethods</code>
      <code>setConstantsMap</code>
      <code>setInstanceMock</code>
      <code>setMockOriginalDestructor</code>
      <code>setName</code>
      <code>setParameterOverrides</code>
      <code>setWhiteListedMethods</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$this->blackListedMethods]]></code>
      <code><![CDATA[$this->blackListedMethods]]></code>
      <code><![CDATA[$this->constantsMap]]></code>
      <code><![CDATA[$this->parameterOverrides]]></code>
      <code><![CDATA[$this->php7SemiReservedKeywords]]></code>
      <code><![CDATA[$this->targets]]></code>
      <code><![CDATA[$this->whiteListedMethods]]></code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$this->blackListedMethods[]]]></code>
      <code><![CDATA[$this->targets[]]]></code>
      <code><![CDATA[$this->whiteListedMethods[]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$method</code>
      <code>$method</code>
      <code>$target</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>addWhiteListedMethods</code>
      <code>setBlackListedMethods</code>
      <code>setWhiteListedMethods</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/MockDefinition.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$code</code>
      <code>$config</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>getClassName</code>
      <code>getCode</code>
      <code>getConfig</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>getName</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>getConfig</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/MockNameBuilder.php">
    <MissingParamType>
      <code>$part</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$mockCounter</code>
      <code>$parts</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>addPart</code>
      <code>build</code>
    </MissingReturnType>
    <MixedArgumentTypeCoercion>
      <code>$parts</code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAssignment>
      <code><![CDATA[$this->parts[]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$part</code>
      <code>static::$mockCounter</code>
    </MixedAssignment>
    <MixedOperand>
      <code>static::$mockCounter</code>
    </MixedOperand>
  </file>
  <file src="src/Mockery/Generator/Parameter.php">
    <InvalidReturnStatement>
      <code>\class_exists($typeHint) ? DefinedTargetClass::factory($typeHint, false) : null</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>\ReflectionClass|null</code>
    </InvalidReturnType>
    <MissingParamType>
      <code>$method</code>
    </MissingParamType>
    <PossiblyNullArgument>
      <code>$typeHint</code>
    </PossiblyNullArgument>
    <PossiblyUnusedMethod>
      <code>getClass</code>
      <code>getTypeHintAsString</code>
      <code>isArray</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/AvoidMethodClashPass.php">
    <MissingClosureParamType>
      <code>$method</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>function ($method) {</code>
    </MissingClosureReturnType>
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$config->getMethodsToMock()]]></code>
    </MixedArgument>
    <MixedMethodCall>
      <code>getName</code>
    </MixedMethodCall>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/CallTypeHintPass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/ClassAttributesPass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$class</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getAttributes</code>
    </MixedMethodCall>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/ClassNamePass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$className</code>
      <code>$namespace</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$className</code>
    </MixedOperand>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/ClassPass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$target</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getName</code>
      <code>isFinal</code>
    </MixedMethodCall>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/ConstantsPass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$constant</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$cm[$config->getName()]]]></code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code><![CDATA[$cm[$config->getName()]]]></code>
      <code><![CDATA[$cm[$config->getName()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$cm</code>
      <code>$cm</code>
      <code>$constant</code>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyFalseArgument>
      <code>$i</code>
    </PossiblyFalseArgument>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php">
    <MissingParamType>
      <code>$class</code>
      <code>$code</code>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>appendToClass</code>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$code</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$code</code>
    </MixedOperand>
    <PossiblyFalseArgument>
      <code>$lastBrace</code>
    </PossiblyFalseArgument>
    <PossiblyUnusedMethod>
      <code>apply</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/InterfacePass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$i</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getName</code>
      <code>getName</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$code</code>
    </MixedOperand>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/MagicMethodTypeHintsPass.php">
    <InvalidArgument>
      <code>$code</code>
      <code>$code</code>
      <code>$code</code>
      <code>$code</code>
    </InvalidArgument>
    <InvalidReturnStatement>
      <code>$code</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>string</code>
    </InvalidReturnType>
    <MissingReturnType>
      <code>renderTypeHint</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$config->getTargetClass()]]></code>
      <code>$interface</code>
      <code>$method</code>
      <code><![CDATA[$method->getName()]]></code>
      <code><![CDATA[$method->getName()]]></code>
      <code><![CDATA[$method->getName()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code>$interface</code>
      <code>$method</code>
      <code>$name</code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$method->getName()]]></code>
      <code>$name</code>
      <code><![CDATA[$this->renderTypeHint($parameter)]]></code>
    </MixedOperand>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/MethodDefinitionPass.php">
    <InvalidCast>
      <code>$param</code>
      <code>$param</code>
    </InvalidCast>
    <InvalidMethodCall>
      <code>getName</code>
      <code>isPassedByReference</code>
    </InvalidMethodCall>
    <MissingParamType>
      <code>$class</code>
      <code>$code</code>
      <code>$code</code>
      <code>$config</code>
      <code>$config</code>
      <code>$method</code>
    </MissingParamType>
    <MissingReturnType>
      <code>appendToClass</code>
      <code>apply</code>
      <code>renderMethodBody</code>
      <code>renderParams</code>
      <code>renderReturnType</code>
      <code>renderTypeHint</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$method</code>
      <code><![CDATA[$method->getParameters()]]></code>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[strtolower((string) $class->getName())][$method->getName()]]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$overrides[$class_name]</code>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[strtolower((string) $class->getName())]]]></code>
      <code><![CDATA[$overrides[strtolower((string) $class->getName())][$method->getName()]]]></code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>
      <code><![CDATA[$overrides[strtolower((string) $class->getName())][$method->getName()]]]></code>
      <code><![CDATA[$overrides[strtolower((string) $class->getName())][$method->getName()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$class</code>
      <code>$class</code>
      <code>$code</code>
      <code>$defaultValue</code>
      <code>$method</code>
      <code>$overrides</code>
      <code>$overrides</code>
      <code>$paramDef</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getDeclaringClass</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getParameterOverrides</code>
      <code>getParameterOverrides</code>
      <code>getParameters</code>
      <code>getReturnType</code>
      <code>isInternal</code>
      <code>isProtected</code>
      <code>isPublic</code>
      <code>isStatic</code>
      <code>isStatic</code>
      <code>returnsReference</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$code</code>
      <code><![CDATA[$method->getName()]]></code>
      <code>$paramDef</code>
      <code><![CDATA[$this->renderMethodBody($method, $config)]]></code>
      <code><![CDATA[$this->renderParams($method, $config)]]></code>
      <code><![CDATA[$this->renderReturnType($method)]]></code>
    </MixedOperand>
    <PossiblyFalseArgument>
      <code>$lastBrace</code>
    </PossiblyFalseArgument>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/Pass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>apply</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/RemoveBuiltinMethodsThatAreFinalPass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$methods</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$this->methods[$method->getName()]]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$this->methods[$method->getName()]]]></code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code><![CDATA[$this->methods[$method->getName()]]]></code>
      <code><![CDATA[$this->methods[$method->getName()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$method</code>
      <code>$target</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getMethods</code>
      <code>getName</code>
      <code>getName</code>
      <code>isFinal</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>apply</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/RemoveDestructorPass.php">
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$target</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>apply</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/RemoveUnserializeForInternalSerializableClassesPass.php">
    <MissingParamType>
      <code>$class</code>
      <code>$code</code>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>appendToClass</code>
      <code>apply</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$code</code>
      <code>$target</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>hasInternalAncestor</code>
      <code>implementsInterface</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$code</code>
    </MixedOperand>
    <PossiblyFalseArgument>
      <code>$lastBrace</code>
    </PossiblyFalseArgument>
    <PossiblyUnusedMethod>
      <code>apply</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/StringManipulation/Pass/TraitPass.php">
    <MissingClosureParamType>
      <code>$trait</code>
    </MissingClosureParamType>
    <MissingParamType>
      <code>$code</code>
    </MissingParamType>
    <MissingReturnType>
      <code>apply</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$traits</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$traits</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getName</code>
    </MixedMethodCall>
  </file>
  <file src="src/Mockery/Generator/StringManipulationGenerator.php">
    <MixedArgument>
      <code>$namedConfig</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$className</code>
      <code>$code</code>
      <code>$namedConfig</code>
      <code>$pass</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>apply</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>addPass</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/TargetClassInterface.php">
    <PossiblyUnusedMethod>
      <code>getAttributes</code>
      <code>getShortName</code>
      <code>hasInternalAncestor</code>
      <code>implementsInterface</code>
      <code>inNamespace</code>
      <code>isAbstract</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Generator/UndefinedTargetClass.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingParamType>
      <code>$name</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$name</code>
    </MissingPropertyType>
    <MixedInferredReturnType>
      <code>getName</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->name]]></code>
      <code><![CDATA[$this->name]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Mockery/HigherOrderMessage.php">
    <MissingParamType>
      <code>$args</code>
      <code>$method</code>
      <code>$method</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$method</code>
    </MissingPropertyType>
    <MixedAssignment>
      <code>$expectation</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>\Mockery\Expectation</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>withArgs</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$expectation->withArgs($args)]]></code>
      <code><![CDATA[$this->mock->{$this->method}($method, $args)]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Mockery/Instantiator.php">
    <InvalidArgument>
      <code><![CDATA[function ($code, $message, $file, $line) use ($reflectionClass, & $error) {
            $msg = sprintf(
                'Could not produce an instance of "%s" via un-serialization, since an error was triggered in file "%s" at line "%d"',
                $reflectionClass->getName(),
                $file,
                $line
            );

            $error = new UnexpectedValueException($msg, 0, new \Exception($message, $code));
        }]]></code>
    </InvalidArgument>
    <MissingClosureReturnType>
      <code>function () use ($serializedString) {</code>
    </MissingClosureReturnType>
    <MissingParamType>
      <code>$className</code>
    </MissingParamType>
    <MissingReturnType>
      <code>instantiate</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$className</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$instance</code>
    </MixedAssignment>
    <UnusedMethod>
      <code>hasInternalAncestors</code>
    </UnusedMethod>
    <UnusedVariable>
      <code>$error</code>
    </UnusedVariable>
  </file>
  <file src="src/Mockery/LegacyMockInterface.php">
    <MissingParamType>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
    </MissingParamType>
    <MissingReturnType>
      <code>mockery_setCurrentOrder</code>
      <code>mockery_setGroup</code>
      <code>shouldAllowMockingMethod</code>
    </MissingReturnType>
    <PossiblyInvalidDocblockTag>
      <code>@var array $args</code>
      <code>@var string $method</code>
      <code>@var string $method</code>
      <code>@var string $method</code>
    </PossiblyInvalidDocblockTag>
    <PossiblyUnusedMethod>
      <code>byDefault</code>
      <code>mockery_allocateOrder</code>
      <code>mockery_findExpectation</code>
      <code>mockery_getCurrentOrder</code>
      <code>mockery_getExpectationCount</code>
      <code>mockery_getGroups</code>
      <code>mockery_getMockableProperties</code>
      <code>mockery_init</code>
      <code>mockery_setGroup</code>
      <code>mockery_teardown</code>
      <code>mockery_verify</code>
      <code>shouldAllowMockingMethod</code>
      <code>shouldAllowMockingProtectedMethods</code>
      <code>shouldDeferMissing</code>
      <code>shouldHaveBeenCalled</code>
      <code>shouldNotHaveBeenCalled</code>
      <code>shouldNotReceive</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedReturnValue>
      <code>Mock</code>
      <code>\Mockery\ExpectationDirector|null</code>
    </PossiblyUnusedReturnValue>
    <UndefinedDocblockClass>
      <code>null|array|Closure</code>
      <code>null|array|Closure</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Mockery/Loader/EvalLoader.php">
    <MixedArgument>
      <code><![CDATA[$definition->getClassName()]]></code>
    </MixedArgument>
    <MixedOperand>
      <code><![CDATA[$definition->getCode()]]></code>
    </MixedOperand>
  </file>
  <file src="src/Mockery/Loader/Loader.php">
    <PossiblyUnusedMethod>
      <code>load</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Loader/RequireLoader.php">
    <MixedArgument>
      <code><![CDATA[$definition->getClassName()]]></code>
      <code><![CDATA[$definition->getCode()]]></code>
    </MixedArgument>
    <UnresolvableInclude>
      <code>require $temporaryFilePath</code>
    </UnresolvableInclude>
    <UnusedClass>
      <code>RequireLoader</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/Matcher/AnyOf.php">
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->expected]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Mockery/Matcher/Closure.php">
    <MixedFunctionCall>
      <code><![CDATA[($this->expected)($actual)]]></code>
    </MixedFunctionCall>
  </file>
  <file src="src/Mockery/Matcher/Contains.php">
    <MixedArgumentTypeCoercion>
      <code>$actual</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$expectation</code>
      <code>$value</code>
    </MixedAssignment>
  </file>
  <file src="src/Mockery/Matcher/Ducktype.php">
    <MixedArgument>
      <code>$method</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->expected]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$method</code>
    </MixedAssignment>
  </file>
  <file src="src/Mockery/Matcher/HasKey.php">
    <MixedArgumentTypeCoercion>
      <code>$actual</code>
      <code><![CDATA[$this->expected]]></code>
      <code><![CDATA[$this->expected]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Mockery/Matcher/HasValue.php">
    <MixedArgumentTypeCoercion>
      <code>$actual</code>
      <code><![CDATA[$this->expected]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Mockery/Matcher/IsEqual.php">
    <UnusedClass>
      <code>IsEqual</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/Matcher/IsSame.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->expected === $actual]]></code>
    </DocblockTypeContradiction>
    <UnusedClass>
      <code>IsSame</code>
    </UnusedClass>
  </file>
  <file src="src/Mockery/Matcher/MultiArgumentClosure.php">
    <MixedFunctionCall>
      <code><![CDATA[($this->expected)(...$actual)]]></code>
    </MixedFunctionCall>
  </file>
  <file src="src/Mockery/Matcher/MustBe.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$this->expected === $actual]]></code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/Mockery/Matcher/Not.php">
    <DocblockTypeContradiction>
      <code><![CDATA[$actual !== $this->expected]]></code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/Mockery/Matcher/NotAnyOf.php">
    <MixedAssignment>
      <code>$exp</code>
    </MixedAssignment>
  </file>
  <file src="src/Mockery/Matcher/Pattern.php">
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->expected]]></code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/Mockery/Matcher/Subset.php">
    <MissingReturnType>
      <code>loose</code>
    </MissingReturnType>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$this->expected]]></code>
      <code><![CDATA[$this->expected]]></code>
      <code><![CDATA[$this->expected]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>loose</code>
      <code>strict</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Matcher/Type.php">
    <MixedInferredReturnType>
      <code>bool</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code>$function($actual)</code>
    </MixedReturnStatement>
  </file>
  <file src="src/Mockery/MethodCall.php">
    <MissingParamType>
      <code>$args</code>
      <code>$method</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$args</code>
      <code>$method</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>getArgs</code>
      <code>getMethod</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>getArgs</code>
      <code>getMethod</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Mock.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingClosureParamType>
      <code>$method</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>function ($method) {</code>
      <code>function () { yield; }</code>
    </MissingClosureReturnType>
    <MissingParamType>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$name</code>
      <code>$name</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$_mockery_allowMockingProtectedMethods</code>
      <code>$_mockery_instanceMock</code>
      <code>$_mockery_receivedMethodCalls</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>_mockery_constructorCalled</code>
      <code>_mockery_findExpectedMethodHandler</code>
      <code>_mockery_getReceivedMethodCalls</code>
      <code>_mockery_handleMethodCall</code>
      <code>_mockery_handleStaticMethodCall</code>
      <code>asUndefined</code>
      <code>hasMethodOverloadingInParentClass</code>
      <code>mockery_getExpectations</code>
      <code>mockery_getMethod</code>
      <code>mockery_isInstance</code>
      <code>mockery_setCurrentOrder</code>
      <code>mockery_setGroup</code>
    </MissingReturnType>
    <MixedArrayOffset>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->_mockery_groups[$group]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$allowMockingProtectedMethods</code>
      <code>$count</code>
      <code>$director</code>
      <code>$director</code>
      <code>$director</code>
      <code>$director</code>
      <code>$exp</code>
      <code>$expectation</code>
      <code>$exps</code>
      <code>$handler</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$prototype</code>
      <code>$returnValue</code>
      <code>$rm</code>
      <code>$rm</code>
      <code>$rm</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>\Mockery\ExpectationDirector|null</code>
      <code>\Mockery\ExpectationInterface|\Mockery\Expectation|ExpectsHigherOrderMessage</code>
      <code>\Mockery\ExpectationInterface|\Mockery\Expectation|\Mockery\HigherOrderMessage</code>
      <code>\Mockery\Expectation|null</code>
      <code>int</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>byDefault</code>
      <code>call</code>
      <code>findExpectation</code>
      <code>getExpectationCount</code>
      <code>getExpectations</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getName</code>
      <code>getPrototype</code>
      <code>isAbstract</code>
      <code>isAbstract</code>
      <code>isPrivate</code>
      <code>isProtected</code>
      <code>isProtected</code>
      <code>isProtected</code>
      <code>isPublic</code>
      <code>isPublic</code>
      <code>never</code>
      <code>push</code>
      <code>setActualOrder</code>
      <code>setExpectedOrder</code>
      <code>setMethodName</code>
      <code>verify</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$count</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
      <code>$method</code>
    </MixedOperand>
    <MixedReturnStatement>
      <code>$count</code>
      <code><![CDATA[$director->findExpectation($args)]]></code>
      <code>$expectation</code>
      <code><![CDATA[$this->__call('__toString', array())]]></code>
      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>
      <code><![CDATA[$this->shouldReceive($something)->once()]]></code>
    </MixedReturnStatement>
    <MixedReturnTypeCoercion>
      <code><![CDATA[$this->_mockery_mockableMethods]]></code>
      <code>string[]</code>
    </MixedReturnTypeCoercion>
    <MoreSpecificImplementedParamType>
      <code>$methodNames</code>
      <code>$methodNames</code>
    </MoreSpecificImplementedParamType>
    <PossiblyInvalidDocblockTag>
      <code>@var array $args</code>
      <code>@var string $method</code>
      <code>@var string $method</code>
      <code>@var string $method</code>
    </PossiblyInvalidDocblockTag>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyUnusedMethod>
      <code>__callStatic</code>
      <code>_mockery_constructorCalled</code>
      <code>asUndefined</code>
      <code>mockery_callSubjectMethod</code>
      <code>mockery_getExpectations</code>
      <code>mockery_thrownExceptions</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$_mockery_name</code>
    </PossiblyUnusedProperty>
    <PossiblyUnusedReturnValue>
      <code>\Mockery\ExpectationDirector|null</code>
    </PossiblyUnusedReturnValue>
    <RedundantCondition>
      <code><![CDATA[$i->getName() !== 'Stringable']]></code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[!is_null($this->_mockery_partial)]]></code>
      <code><![CDATA[isset($this->_mockery_partial)]]></code>
    </RedundantConditionGivenDocblockType>
    <TooManyArguments>
      <code>shouldIgnoreMissing</code>
      <code>shouldIgnoreMissing</code>
    </TooManyArguments>
    <UndefinedInterfaceMethod>
      <code>once</code>
    </UndefinedInterfaceMethod>
    <UndefinedMagicMethod>
      <code>andReturn</code>
      <code>once</code>
    </UndefinedMagicMethod>
  </file>
  <file src="src/Mockery/MockInterface.php">
    <PossiblyUnusedMethod>
      <code>allows</code>
      <code>expects</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/ReceivedMethodCalls.php">
    <MissingPropertyType>
      <code>$methodCalls</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>push</code>
      <code>verify</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$methodCall->getArgs()]]></code>
      <code><![CDATA[$methodCall->getArgs()]]></code>
    </MixedArgument>
    <MixedArrayAssignment>
      <code><![CDATA[$this->methodCalls[]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$methodCall</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getArgs</code>
      <code>getArgs</code>
      <code>getMethod</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>push</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/Reflector.php">
    <ImplicitToStringCast>
      <code>$declaringClass</code>
      <code><![CDATA[$method->getDeclaringClass()]]></code>
    </ImplicitToStringCast>
    <InvalidArgument>
      <code>$declaringClass</code>
    </InvalidArgument>
    <LessSpecificReturnType>
      <code>string|null</code>
    </LessSpecificReturnType>
    <MismatchingDocblockParamType>
      <code>string</code>
    </MismatchingDocblockParamType>
    <MixedArgument>
      <code>$typeHint</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$typeHint</code>
    </MixedAssignment>
    <MixedReturnTypeCoercion>
      <code><![CDATA[[
                [
                    'typeHint' => $typeHint,
                    'isPrimitive' => in_array($typeHint, ['array', 'bool', 'int', 'float', 'null', 'object', 'string']),
                ],
            ]]]></code>
      <code><![CDATA[list<array{typeHint: string, isPrimitive: bool}>]]></code>
    </MixedReturnTypeCoercion>
    <PossiblyNullArgument>
      <code>$declaringClass</code>
      <code>$typeHint</code>
      <code>$typeHint</code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code><![CDATA[is_null($type) && method_exists($method, 'getTentativeReturnType')]]></code>
      <code><![CDATA[is_null($type) && method_exists($method, 'getTentativeReturnType')]]></code>
    </RedundantCondition>
    <UndefinedMethod>
      <code>getName</code>
      <code>isBuiltin</code>
    </UndefinedMethod>
    <UnusedDocblockParam>
      <code>$param</code>
      <code>$param</code>
    </UnusedDocblockParam>
  </file>
  <file src="src/Mockery/Undefined.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <PossiblyUnusedMethod>
      <code>__call</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedParam>
      <code>$args</code>
      <code>$method</code>
    </PossiblyUnusedParam>
  </file>
  <file src="src/Mockery/VerificationDirector.php">
    <MissingParamType>
      <code>$args</code>
      <code>$args</code>
      <code>$args</code>
      <code>$args</code>
      <code>$limit</code>
      <code>$maximum</code>
      <code>$method</code>
      <code>$method</code>
      <code>$minimum</code>
    </MissingParamType>
    <MissingReturnType>
      <code>atLeast</code>
      <code>atMost</code>
      <code>between</code>
      <code>cloneApplyAndVerify</code>
      <code>cloneWithoutCountValidatorsApplyAndVerify</code>
      <code>once</code>
      <code>times</code>
      <code>twice</code>
      <code>verify</code>
      <code>with</code>
      <code>withAnyArgs</code>
      <code>withArgs</code>
      <code>withNoArgs</code>
    </MissingReturnType>
    <PossiblyUnusedMethod>
      <code>atLeast</code>
      <code>atMost</code>
      <code>between</code>
      <code>once</code>
      <code>times</code>
      <code>twice</code>
      <code>with</code>
      <code>withAnyArgs</code>
      <code>withArgs</code>
      <code>withNoArgs</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Mockery/VerificationExpectation.php">
    <MissingReturnType>
      <code>clearCountValidators</code>
    </MissingReturnType>
  </file>
  <file src="src/helpers.php">
    <MissingParamType>
      <code>$args</code>
      <code>$args</code>
      <code>$args</code>
    </MissingParamType>
    <MissingReturnType>
      <code>andAnyOtherArgs</code>
      <code>andAnyOthers</code>
      <code>anyArgs</code>
      <code>mock</code>
      <code>namedMock</code>
      <code>spy</code>
    </MissingReturnType>
  </file>
</files>
